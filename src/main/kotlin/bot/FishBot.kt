package bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.logging.LogLevel
import model.GameData
import model.Player
import model.Rod
import java.util.concurrent.ConcurrentHashMap
import kotlin.concurrent.thread

class FishBot(token:String){
    private val players = ConcurrentHashMap<Long,Player>()

    private val bot: Bot = bot {
        this.token = token
        logLevel = LogLevel.Network.Body

        dispatch {
            command("start") {
                val msg = message ?: return@command
                val user = msg.from ?: return@command
                val chatId = msg.chat.id
                val pl = players.computeIfAbsent(user.id){ Player(user.id, user.firstName ?: "Anon") }
                sendMessage(chatId, "üé£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FishSim, ${pl.nick}!", mainMenu())
            }

            callbackQuery {
                val cq = callbackQuery ?: return@callbackQuery
                val data = cq.data ?: return@callbackQuery
                val from = cq.from
                val chatId = cq.message?.chat?.id ?: return@callbackQuery
                val mid = cq.message?.messageId ?: return@callbackQuery

                val pl = players.computeIfAbsent(from.id){ Player(from.id, from.firstName ?: "Anon") }

                when {
                    data == "menu" -> editMessage(chatId, mid, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", mainMenu())
                    data.startsWith("shop") -> handleShop(chatId, mid, pl, data)
                    data.startsWith("loc")  -> chooseLocation(chatId, mid, pl, data)
                    data == "invent"        -> showInvent(chatId, mid, pl)
                    data == "sell"          -> sellAll(chatId, mid, pl)
                    data == "score"         -> score(chatId, mid)
                }
                // Stop the loading spinner on the button
                bot.answerCallbackQuery(cq.id)
            }
        }
    }

    fun start() = bot.startPolling()

    /* ---------- UI ---------- */

    private fun mainMenu(): InlineKeyboardMarkup =
        ikm(
            row(btn("üõí –ú–∞–≥–∞–∑–∏–Ω","shop")),
            row(btn("üé£ –ó–∞–±—Ä–æ—Å","loc")),
            row(btn("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å","invent")),
            row(btn("üí∞ –ü—Ä–æ–¥–∞—Ç—å —Ä—ã–±—É","sell")),
            row(btn("üìä –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤","score"))
        )

    private fun shopMenu(pl:Player): InlineKeyboardMarkup =
        ikm(
            listOfNotNull(
                if (pl.rod==Rod.BASIC) btn("–ö—É–ø–∏—Ç—å —É–¥–∏–ª–∏—â–µ PRO ‚Äî 120‚ÇΩ","shop_buy_pro") else null,
                btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥","menu")
            ).let { row(*it.toTypedArray()) }
        )

    private fun locMenu(): InlineKeyboardMarkup =
        ikm(
            row(*GameData.locations.map { btn("üé£ ${it.second}", "loc_${it.first}") }.toTypedArray()),
            row(btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥","menu"))
        )

    /* ---------- Handlers ---------- */

    private fun handleShop(chatId: Long, mid:Long, pl:Player, data:String){
        if (data=="shop") {
            editMessage(chatId, mid, "–ë–∞–ª–∞–Ω—Å: ${pl.coins}‚ÇΩ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", shopMenu(pl))
            return
        }
        if (data=="shop_buy_pro") {
            if (pl.coins < Rod.PRO.price) {
                answerAlert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            }
            pl.coins -= Rod.PRO.price
            pl.rod = Rod.PRO
            editMessage(chatId, mid, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∫—É–ø–∏–ª–∏ PRO-—É–¥–∏–ª–∏—â–µ!\n–ë–∞–ª–∞–Ω—Å: ${pl.coins}‚ÇΩ", mainMenu())
        }
    }

    private fun chooseLocation(chatId:Long, mid:Long, pl:Player, data:String){
        if (data=="loc") {
            editMessage(chatId, mid, "–ì–¥–µ –±—É–¥–µ–º —Ä—ã–±–∞—á–∏—Ç—å?", locMenu())
            return
        }
        val locId = data.removePrefix("loc_")
        editMessage(chatId, mid, "–ó–∞–±—Ä–æ—Å —É–¥–æ—á–∫–∏... ‚è≥", null)
        thread {
            Thread.sleep(2_000)
            val fish = GameData.rollFish(locId)
            pl.bag += fish
            sendMessage(chatId, "üêü –£–ª–æ–≤: %.2f –∫–≥ %s (‚âà%d‚ÇΩ)".format(fish.weight, fish.species, fish.price), mainMenu())
        }
    }

    private fun showInvent(chatId:Long, mid:Long, pl:Player){
        val txt = if(pl.bag.isEmpty()) "–°–∞–¥–æ–∫ –ø—É—Å—Ç."
                  else pl.bag.joinToString("\n"){ "%.2f –∫–≥ %s".format(it.weight,it.species) }
        editMessage(chatId, mid, txt, ikm(row(btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥","menu"))))
    }

    private fun sellAll(chatId:Long, mid:Long, pl:Player){
        val sum = pl.bag.sumOf { it.price }
        pl.coins += sum
        pl.bag.clear()
        editMessage(chatId, mid, "–ü—Ä–æ–¥–∞–ª–∏ —Ä—ã–±—É –Ω–∞ $sum‚ÇΩ. –ë–∞–ª–∞–Ω—Å: ${pl.coins}‚ÇΩ", mainMenu())
    }

    private fun score(chatId:Long, mid:Long){
        val table = players.values.sortedByDescending { it.totalWeight }
            .withIndex()
            .joinToString("\n"){ (i,p)-> "${i+1}. ${p.nick} ‚Äî %.2f –∫–≥".format(p.totalWeight) }
            .ifBlank { "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–π–º–∞–ª." }
        editMessage(chatId, mid, "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n\n$table", ikm(row(btn("‚¨ÖÔ∏è –ù–∞–∑–∞–¥","menu"))))
    }

    /* ---------- helpers ---------- */

    private fun sendMessage(chatId: Long, text: String, markup: InlineKeyboardMarkup? = null) {
        bot.sendMessage(chatId = ChatId.fromId(chatId), text = text, replyMarkup = markup)
    }

    private fun editMessage(chatId: Long, messageId: Long, text: String, markup: InlineKeyboardMarkup? = null) {
        bot.editMessageText(chatId = ChatId.fromId(chatId), messageId = messageId, text = text, replyMarkup = markup)
    }

    private fun answerAlert(text:String){
        // Utility placeholder if you want to show alerts via answerCallbackQuery with showAlert=true.
        // Implemented in-place in handlers when needed.
    }

    private fun ikm(vararg rows: List<InlineKeyboardButton>) =
        InlineKeyboardMarkup.create(*rows)

    private fun row(vararg btns: InlineKeyboardButton) = btns.toList()

    private fun btn(text:String, data:String) = InlineKeyboardButton.CallbackData(text, data)
}
